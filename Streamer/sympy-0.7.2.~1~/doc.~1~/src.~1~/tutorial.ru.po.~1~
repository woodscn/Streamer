# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008, 2009, 2010, 2011, 2012 SymPy Development Team
# This file is distributed under the same license as the SymPy package.
# Alexey Subach <alexey.subach@gmail.com>, 2011
#
msgid ""
msgstr ""
"Project-Id-Version: SymPy 0.7.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-03-19 21:43\n"
"PO-Revision-Date: 2012-03-19 21:40+0400\n"
"Last-Translator: Alexey Gudchenko <proga@goodok.ru>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: Russian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

# 3b8d0d99cbd0485d8a0f874d50c2e0ba
#: ../../src/tutorial.rst:5
msgid "Tutorial"
msgstr "Краткое руководство"

# 261dbc2a93064851bb80b80a8985f0bd
#: ../../src/tutorial.rst:10
msgid "Introduction"
msgstr "Введение"

# d007423f3c5d4407b0ca3221168f4a1e
#: ../../src/tutorial.rst:12
msgid ""
"SymPy is a Python library for symbolic mathematics. It aims to become a full-"
"featured computer algebra system (CAS) while keeping the code as simple as "
"possible in order to be comprehensible and easily extensible.  SymPy is "
"written entirely in Python and does not require any external libraries."
msgstr ""
"SymPy представляет собой открытую библиотеку символьных вычислений на языке "
"Python. Цель SymPy - стать полнофункциональной системой компьютерной алгебры "
"(CAS), при этом сохраняя код максимально понятным и легко расширяемым. SymPy "
"полностью написан на Python и не требует сторонних библиотек."

# 344f5db4e74749c1a76459f6cec09b63
#: ../../src/tutorial.rst:17
msgid ""
"This tutorial gives an overview and introduction to SymPy. Read this to have "
"an idea what SymPy can do for you (and how) and if you want to know more, "
"read the :ref:`SymPy User's Guide <guide>`, :ref:`SymPy Modules Reference "
"<module-docs>`. or the `sources <https://github.com/sympy/sympy/>`_ directly."
msgstr ""
"Данное руководство представляет из себя введение в SymPy. В "
"нем вы узнаете об основных возможностях SymPy и каким образом использовать "
"эту программу. Если же вы желаете прочитать более подробное руководство, то "
"обратитесь к :ref:`Руководству пользователя SymPy <guide>`, :ref:`Описанию "
"модулей SymPy <module-docs>`. Можно также обратиться и к `исходному коду "
"<https://github.com/sympy/sympy/>`_ библиотеки."

# 12619172a6874cb4af84282e3e1bfc39
#: ../../src/tutorial.rst:26
msgid "First Steps with SymPy"
msgstr "Первые шаги с SymPy"

# 6f67d8997f1a474288d6bd50f5ddbc4f
#: ../../src/tutorial.rst:28
msgid ""
"The easiest way to download it is to go to http://code.google.com/p/sympy/ "
"and download the latest tarball from the Featured Downloads:"
msgstr ""
"Скачать SymPy проще всего с http://code.google.com/p/sympy/. В разделе "
"Featured, Downloads нужно найти и загрузить последнюю версию дистрибутива:"

# 65bde5e4aded4818bc11c4b9cfc8a3b7
#: ../../src/tutorial.rst:34
msgid "Unpack it:"
msgstr ""
"Для Windows-систем, нужно скачать и запустить установочный .exe файл. В "
"POSIX-совместимых системах нужно скачать .tar.gz файл и распаковать его:"

# 76f6f7d72759408084134e093b5d9aea
#: ../../src/tutorial.rst:40
msgid "and try it from a Python interpreter:"
msgstr "и запустить из интерпретатора Python:"

# 4ddd39aeea714e9f8495cd77f7e4d7dd
#: ../../src/tutorial.rst:54
msgid ""
"You can use SymPy as shown above and this is indeed the recommended way if "
"you use it in your program. You can also install it using ``./setup.py "
"install`` as any other Python module, or just install a package in your "
"favourite Linux distribution, e.g.:"
msgstr ""
"Если вы собираетесь использовать SymPy в вашей программе как модуль, "
"рекомендуется обращаться к нему таким же способом, как показано выше. "
"Установить модуль в систему можно или из скаченных исходников, используя "
"команду ./setup.py install. Или, если вы работаете в Linux, можно установить "
"пакет ``python-sympy`` с помощью системы установки программ:"

# ce08a431018449c093786fe229ef9736
#: ../../src/tutorial.rst:80
msgid ""
"For other means how to install SymPy, consult the  Downloads_ tab on the "
"SymPy's webpage."
msgstr ""
"Другие способы установки SymPy описаны в разделе Downloads_ на домашней "
"странице SymPy."

# e81794f1d22c4f47b1f0b5f484ccb789
#: ../../src/tutorial.rst:87
msgid "isympy Console"
msgstr "Консоль isympy"

# 342865b9196045a6a2a11ae9d69bc980
#: ../../src/tutorial.rst:89
msgid ""
"For experimenting with new features, or when figuring out how to do things, "
"you can use our special wrapper around IPython called ``isympy`` (located in "
"``bin/isympy`` if you are running from the source directory) which is just a "
"standard Python shell that has already imported the relevant SymPy modules "
"and defined the symbols x, y, z and some other things:"
msgstr ""
"SymPy можно использовать не только как модуль, но и как отдельную программу "
"``isympy``, которая расположена в папке ``bin`` относительно директории с "
"исходным кодом. Программа удобна для экспериментов с новыми функциями или "
"для обучения SymPy. Она использует стандартный терминал IPython, но с уже "
"включенными в нее важными модулями SymPy и определенными переменными x, y, z:"

# 9d9f7e2ea55549268218f99a5b14593a
#: ../../src/tutorial.rst:119
msgid ""
"Commands entered by you are bold. Thus what we did in 3 lines in a regular "
"Python interpreter can be done in 1 line in isympy."
msgstr ""
"Команды введенные вами, обозначены жирным шрифтом. То, что мы делали тремя "
"строчками в стандартном терминале Python, мы можем сделать одной строчкой в "
"isympy. Кроме того программа поддерживает различные способы отображения "
"результатов, в том числе графические."

# f53c41b84d8b4d47894877572350325c
#: ../../src/tutorial.rst:124
msgid "Using SymPy as a calculator"
msgstr "Использование SymPy в качестве калькулятора"

# c6a7837a22d44c27a5d35a905779bd84
# 88460153b0404c1c80d7d9fef1b9d530
#: ../../src/tutorial.rst:126
msgid "SymPy has three built-in numeric types: Float, Rational and Integer."
msgstr ""
"SymPy поддерживает три типа численных данных: Float, Rational и Integer."

# 68eba98bb6f742d799aba6051f7f3d0f
#: ../../src/tutorial.rst:128
msgid ""
"The Rational class represents a rational number as a pair of two Integers: "
"the numerator and the denominator. So Rational(1,2) represents 1/2, Rational"
"(5,2) represents 5/2, and so on."
msgstr ""
"Rational представляет собой обыкновенную дробь, которая задается с помощью "
"двух целых чисел: числителя и знаменателя. Например, Rational(1,2) "
"представляет дробь 1/2, Rational(5,2) представляет дробь 5/2, и так далее."

# 4178f4aea2b54612a2a0c8f74fe2aa63
#: ../../src/tutorial.rst:147
msgid ""
"Proceed with caution while working with Python int's and floating point "
"numbers, especially in division, since you may create a Python number, not a "
"SymPy number. A ratio of two Python ints may create a float -- the \"true "
"division\" standard of Python 3 and the default behavior of ``isympy`` which "
"imports division from __future__::"
msgstr ""
"Важная особенность Python-интерпретатора, о которой нужно сказать отдельно, "
"связана с делением целых чисел При делении двух питоновских чисел типа int с "
"помощью оператора \"/\" в старых версиях Python в результате получается "
"число питоновского типа int. В Python 3 этот стандарт изменен на \"true "
"division\", и в результате получается питоновский тип float.И этот же "
"стандарт \"true division\" по умолчанию включен и в isympy::"

# 723ba484cf134b71aaf8e7140c9a3954
#: ../../src/tutorial.rst:157
msgid ""
"But in earlier Python versions where division has not been imported, a "
"truncated int will result::"
msgstr ""
"В более ранних версиях Python этого не получится, и результатом будет "
"целочисленное деление::"

# 0f88584459994baa87824d3fd4cf34f1
#: ../../src/tutorial.rst:163
msgid ""
"In both cases, however, you are not dealing with a SymPy Number because "
"Python created its own number. Most of the time you will probably be working "
"with Rational numbers, so make sure to use Rational to get the SymPy result. "
"One might find it convenient to equate ``R`` and Rational::"
msgstr ""
"Обратите внимание, что и в том и в другом случае вы имеете дело не с "
"объектом Number из библиотеки SymPy, который представляет число в SymPy, а с "
"питоновскими числами, которые создаются самим интерпретатором Python. Скорее "
"всего, вам нужно будете работать с дробными числами из библиотеки SymPy, "
"поэтому для того чтобы получать результат в виде объектов SymPy убедитесь, "
"что вы используете класс Rational. Кому-то может показаться удобным "
"обозначать Rational как ``R``::"

# bf581140e5ea4f8f98031862c785375e
#: ../../src/tutorial.rst:175
msgid ""
"We also have some special constants, like e and pi, that are treated as "
"symbols (1+pi won't evaluate to something numeric, rather it will remain as "
"1+pi), and have arbitrary precision::"
msgstr ""
"В модуле Sympy имеются особые константы, такие как e и pi, которые ведут "
"себя как переменные (то есть выражение 1+pi не преобразуется сразу в число, "
"а так и останется 1+pi)::"

# 366cb3315e5f4371927639cebbf8a726
#: ../../src/tutorial.rst:189
msgid "as you see, evalf evaluates the expression to a floating-point number"
msgstr ""
"как вы видите, функция evalf переводит исходное выражение в число с "
"плавающей точкой. Вычисления можно проводить с большей точностью. Для этого "
"нужно передать в качестве аргумента этой функции требуемое число десятичных "
"знаков."

# b300cf55ed11465bac6e0991d6f61a15
#: ../../src/tutorial.rst:191
msgid "The symbol ``oo`` is used for a class defining mathematical infinity::"
msgstr ""
"Для работы с математической бесконечностью используется символ ``oo``::"

# addc7fddfd294a0e8da003463f35b614
#: ../../src/tutorial.rst:200
msgid "Symbols"
msgstr "Переменные"

# 8508a3480ca34bd4a8741733e17ccc56
#: ../../src/tutorial.rst:202
msgid ""
"In contrast to other Computer Algebra Systems, in SymPy you have to declare "
"symbolic variables explicitly::"
msgstr ""
"В отличие от многих других систем компьютерной алгебры, вам нужно явно "
"декларировать символьные переменные::"

# 19bcc88285724ae99b448a86d7980ce9
#: ../../src/tutorial.rst:209
msgid ""
"On the left is the normal Python variable which has been assigned to the "
"SymPy Symbol class. Predefined symbols (including those for symbols with "
"Greek names) are available for import from abc:"
msgstr ""
"В левой части этого выражения находится переменная Python, которая "
"питоновским присваиванием соотносится с объектом класса Symbol из SymPy."

# 6b654b5bda774aa0a4b150388bc102dc
#: ../../src/tutorial.rst:215
msgid ""
"Symbols can also be created with the ``symbols`` or ``var`` functions, the "
"latter automatically adding the created symbols to the namespace, and both "
"accepting a range notation:"
msgstr ""
"Символьные переменные могут также задаваться и с помощью функций ``symbols`` "
"или ``var``. Они допускают указание диапазона. Их отличие состоит в том, что "
"``var`` добавляет созданные переменные в текущее пространство имен:"

# aa93d9743638443ebbae8bc5bee19e56
#: ../../src/tutorial.rst:227
msgid ""
"Instances of the Symbol class \"play well together\" and are the building "
"blocks of expresions::"
msgstr ""
"Экземпляры класса Symbol взаимодействуют друг с другом. Таким образом, с "
"помощью них конструируются алгебраические выражения::"

# c613786cee894688b20cdccfeaac8c9b
#: ../../src/tutorial.rst:239
msgid ""
"They can be substituted with other numbers, symbols or expressions using "
"``subs(old, new)``::"
msgstr ""
"Переменные могут быть заменены на другие переменные, числа или выражения с "
"помощью функции подстановки ``subs(old, new)``::"

# 3872add29a8b4a71a5e26a3218130491
#: ../../src/tutorial.rst:250
msgid "For the remainder of the tutorial, we assume that we have run::"
msgstr ""
"Теперь, с этого момента, для всех написанных ниже примеров мы будем "
"предполагать, что запустили следующую команду по настройке системы "
"отображения результатов::"

# d1b280862f04408a98ba048cc9460eaa
#: ../../src/tutorial.rst:255
msgid ""
"This will make things look better when printed. See the :ref:`printing-"
"tutorial` section below. If you have a unicode font installed, you can pass "
"use_unicode=True for a slightly nicer output."
msgstr ""
"Она придаст более качественное отображение выражений. Подробнее по системе "
"отображения и печати написано в разделе :ref:`printing-tutorial-ru`. Если же "
"у вас установлен шрифт с юникодом, вы можете использовать опцию "
"use_unicode=True для еще более красивого вывода."

# 17ee30ecb05a410d94cccf0cc229ae5b
#: ../../src/tutorial.rst:260
msgid "Algebra"
msgstr "Алгебра"

# 673fbe9f608748128027755ac1b0d7cb
#: ../../src/tutorial.rst:262
msgid "For partial fraction decomposition, use ``apart(expr, x)``::"
msgstr ""
"Чтобы разложить выражение на простейшие дроби используется функция ``apart"
"(expr, x)``::"

# 723c57a6e36f43eca18771e2ad246955
#: ../../src/tutorial.rst:287
msgid "To combine things back together, use ``together(expr, x)``::"
msgstr ""
"Чтобы снова привести дробь к общему знаменателю используется функция "
"``together(expr, x)``::"

# 607fa824a12d461d9eaf6c83bbc902d0
#: ../../src/tutorial.rst:309
msgid "Calculus"
msgstr "Вычисления"

# 9cbc010ae5b54d2a9222db8a78a2687c
#: ../../src/tutorial.rst:314
msgid "Limits"
msgstr "Пределы"

# e2cfd8cf367b4f41a2eb8f98045e1f45
#: ../../src/tutorial.rst:316
msgid ""
"Limits are easy to use in SymPy, they follow the syntax ``limit(function, "
"variable, point)``, so to compute the limit of f(x) as x -> 0, you would "
"issue ``limit(f, x, 0)``::"
msgstr ""
"Пределы считаются в SymPy очень легко. Чтобы вычислить предел функции, "
"используйте функцию ``limit(function, variable, point)``. Например, чтобы "
"вычислить предел f(x) при x -> 0, вам нужно ввести ``limit(f, x, 0)``::"

# 7cc96e845d0a4c479199f4a51ed7d665
#: ../../src/tutorial.rst:325
msgid "you can also calculate the limit at infinity::"
msgstr "также вы можете вычислять пределы при x, стремящемся к бесконечности::"

# d67693fb8cc04954be3bff6aaa712bfa
#: ../../src/tutorial.rst:336
msgid ""
"for some non-trivial examples on limits, you can read the test file "
"`test_demidovich.py <https://github.com/sympy/sympy/blob/master/sympy/series/"
"tests/test_demidovich.py>`_"
msgstr ""
"Для более сложных примеров вычисления пределов, вы можете обратится к файлу "
"с тестами `test_demidovich.py <https://github.com/sympy/sympy/blob/master/"
"sympy/series/tests/test_demidovich.py>`_ "

# c92009d7b6df4e2d8f9fe9ad14657bbd
#: ../../src/tutorial.rst:343
msgid "Differentiation"
msgstr "Дифференцирование"

# 476aa0220145495a932178c9fc3b305a
#: ../../src/tutorial.rst:345
msgid ""
"You can differentiate any SymPy expression using ``diff(func, var)``. "
"Examples::"
msgstr ""
"Продифференцировать любое выражение SymPy, можно используя ``diff(func, var)"
"``. Примеры::"

# 35850640eccf4071b1b0318a49055f39
#: ../../src/tutorial.rst:358
msgid "You can check, that it is correct by::"
msgstr ""
"Можно, кстати, через пределы проверить правильность вычислений производной::"

# 5ffab586313e4970aa3c933d631bc676
#: ../../src/tutorial.rst:366
msgid ""
"Higher derivatives can be calculated using the ``diff(func, var, n)`` "
"method::"
msgstr ""
"Производные более высших порядков можно вычислить, используя дополнительный "
"параметр этой же функции ``diff(func, var, n)``::"

# 0624a0af400f4e78a351b056a7ba009c
#: ../../src/tutorial.rst:383
msgid "Series expansion"
msgstr "Разложение в ряд"

# b40c746b225d4749a9298ad077c3ce4d
#: ../../src/tutorial.rst:385
msgid "Use ``.series(var, point, order)``::"
msgstr ""
"Для разложения в ряд используйте метод ``.series(var, point, order)``::"

# f9106b494ab2465bbbd4108736f67a1e
#: ../../src/tutorial.rst:400
msgid "Another simple example::"
msgstr "Еще один простой пример::"

# d4aa5a4ef31d4327a70c47b42cc0d2d4
#: ../../src/tutorial.rst:420
msgid "Integration"
msgstr "Интегрирование"

# 8e985ebba8d5463bb1af3a3220dd21b0
#: ../../src/tutorial.rst:422
msgid ""
"SymPy has support for indefinite and definite integration of transcendental "
"elementary and special functions via ``integrate()`` facility, which uses "
"powerful extended Risch-Norman algorithm and some heuristics and pattern "
"matching::"
msgstr ""
"SymPy поддерживает вычисление определенных и неопределенных интегралов с "
"помощью функции ``integrate()``. Она использует расширенный алгоритм Риша-"
"Нормана и некоторые шаблоны и эвристики. Можно вычислять интегралы "
"трансцендентных, простых и специальных функций::"

# 6ff3ff4c189f45078f75a93aa2863ef9
#: ../../src/tutorial.rst:430
msgid "You can integrate elementary functions::"
msgstr "Вы можете интегрировать простейшие функции::"

# ead91a6c777f47dea8be1a1e50bdf752
#: ../../src/tutorial.rst:443
msgid "Also special functions are handled easily::"
msgstr "Примеры интегрирования некоторых специальных функций::"

# 40ad8cd5c7e3460f9cceb59630cf562c
#: ../../src/tutorial.rst:451
msgid "It is possible to compute definite integrals::"
msgstr "Возможно также вычислить определенный интеграл::"

# 19602e9ed1b641f993f704eb31111beb
#: ../../src/tutorial.rst:460
msgid "Also, improper integrals are supported as well::"
msgstr "Поддерживаются и несобственные интегралы::"

# b8ef574746f1448ab78da1958f9de616
#: ../../src/tutorial.rst:472
msgid "Complex numbers"
msgstr "Комплексные числа"

# 13fbbe2555b14aefb25e48ac5ed298a0
#: ../../src/tutorial.rst:474
msgid ""
"Besides the imaginary unit, I, which is imaginary, symbols can be created "
"with attributes (e.g. real, positive, complex, etc...) and this will affect "
"how they behave::"
msgstr ""
"Помимо мнимой единицы I, которое является мнимым числом, символы тоже могут "
"иметь специальные атрибуты (real, positive, complex и т.д), которые "
"определяют поведение этих символов при вычислении символьных выражений::"

# d726887f4f0444dba6e4ef6a2bb702d6
#: ../../src/tutorial.rst:491
msgid "Functions"
msgstr "Функции"

# 42585fb828e24af79c0278aa14bcc2c3
#: ../../src/tutorial.rst:493
msgid "**trigonometric**::"
msgstr "**тригонометрические**::"

# be0be9ba76c042b68160f1907d2b0d13
#: ../../src/tutorial.rst:542
msgid "**spherical harmonics**::"
msgstr "**сферические**::"

# bdc2ad96783444459c3e66c409914143
#: ../../src/tutorial.rst:568
msgid "**factorials and gamma function**::"
msgstr "**факториалы и гамма-функции**::"

# c621f51005504ee9890d34156556de57
#: ../../src/tutorial.rst:586
msgid "**zeta function**::"
msgstr "**дзета-функции**::"

# 95ad3014dc9442cc8eb8438b2cc28327
#: ../../src/tutorial.rst:611
msgid "**polynomials**::"
msgstr "**многочлены**::"

# d91cad90caee4aa7b2922a42ebe608b1
#: ../../src/tutorial.rst:650
msgid "Differential Equations"
msgstr "Дифференциальные уравнения"

# 18467aefa0364cec936571494c1993da
# 65279c1f5c4a448fbb813790d956ac48
#: ../../src/tutorial.rst:652 ../../src/tutorial.rst:672
msgid "In ``isympy``::"
msgstr "В ``isympy``::"

# e036530fce79489cbf1c494a9443568f
#: ../../src/tutorial.rst:670
msgid "Algebraic equations"
msgstr "Алгебраические уравнения"

# fd5aedc6ba9f45b4868c10764f9e6797
#: ../../src/tutorial.rst:685
msgid "Linear Algebra"
msgstr "Линейная алгебра"

# 372cf49866874ec1a97d6cb813f8b63b
#: ../../src/tutorial.rst:690
msgid "Matrices"
msgstr "Матрицы"

# fc4620da22164a3c8f25be8591759f97
#: ../../src/tutorial.rst:692
msgid "Matrices are created as instances from the Matrix class::"
msgstr "Матрицы задаются с помощью конструктора Matrix::"

# 0289f9cec4f140c6adc90aa38f84efee
#: ../../src/tutorial.rst:700
msgid "They can also contain symbols::"
msgstr "В матрицах вы также можете использовать символьные переменные::"

# ced23cc091a34db6be3b5597fd056f32
#: ../../src/tutorial.rst:715
msgid "For more about Matrices, see the Linear Algebra tutorial."
msgstr ""
"Для того, чтобы узнать о матрицах подробнее, прочитайте, пожалуйста, "
"Руководство по Линейной Алгебре."

# 71124cfe123649c28c7a61251d0b1cdd
#: ../../src/tutorial.rst:720
msgid "Pattern matching"
msgstr "Сопоставление с образцом"

# b9ecf875555748978255bc268bc4123c
#: ../../src/tutorial.rst:722
msgid ""
"Use the ``.match()`` method, along with the ``Wild`` class, to perform "
"pattern matching on expressions. The method will return a dictionary with "
"the required substitutions, as follows::"
msgstr ""
"Чтобы сопоставить выражения с образцами, используйте функцию ``.match()`` "
"вместе со вспомогательным классом ``Wild``. Эта функция вернет словарь с "
"необходимыми заменами, например::"

# 06d4a8e419854045af79b0076e71616a
#: ../../src/tutorial.rst:736
msgid "If the match is unsuccessful, it returns ``None``::"
msgstr "Если же сопоставление не удалось, функция вернет``None``::"

# 7219ffc6e8b0486a913297c19b5fce1f
#: ../../src/tutorial.rst:741
msgid ""
"One can also use the exclude parameter of the ``Wild`` class to ensure that "
"certain things do not show up in the result::"
msgstr ""
"Также можно использовать параметр exclude для исключения некоторых значений "
"из результата::"

# a692f291013a4777a4771188901c6bf2
#: ../../src/tutorial.rst:755
msgid "Printing"
msgstr "Печать"

# 8cfe16423a79408c828d270def412899
#: ../../src/tutorial.rst:757
msgid "There are many ways to print expressions."
msgstr "Реализовано несколько способов вывода выражений на экран."

# a9891e6028b644879ce5e3a8489a72a5
#: ../../src/tutorial.rst:759
msgid "**Standard**"
msgstr "**Стандартный**"

# 9802b10f6c2d4b7997302f4315e8bf2a
#: ../../src/tutorial.rst:761
msgid "This is what ``str(expression)`` returns and it looks like this:"
msgstr ""
"Стандартный способ представлен функцией ``str(expression)``, которая "
"работает следующим образом:"

# 461df293b09c46b1bf24bc5c335b4401
#: ../../src/tutorial.rst:772
msgid "**Pretty printing**"
msgstr "**Красивая печать**"

# 29c9e2204a0948db9d8328300f3bdd1a
#: ../../src/tutorial.rst:774
msgid "Nice ascii-art printing is produced by the ``pprint`` function:"
msgstr ""
"Этот способ печати выражений основан на ascii-графике и реализован через "
"функцию ``pprint``:"

# 5fc9fa809fa04cee8113a669f032b9c3
#: ../../src/tutorial.rst:793
msgid ""
"If you have a unicode font installed, the ``pprint`` function will use it by "
"default. You can override this using the ``use_unicode`` option.:"
msgstr ""
"Если у вас установлен шрифт с юникодом, он будет использовать Pretty-print с "
"юникодом по умолчанию. Эту настройку можно отключить, используя "
"``use_unicode``:"

# dcbf982351c1414bb0c2653039d6f569
#: ../../src/tutorial.rst:803
msgid ""
"See also the wiki `Pretty Printing <https://github.com/sympy/sympy/wiki/"
"Pretty-Printing>`_ for more examples of a nice unicode printing."
msgstr ""
"Для изучения подробных примеров работы Pretty-print с юникодом вы можете "
"обратится к статье `Pretty Printing <https://github.com/sympy/sympy/wiki/"
"Pretty-Printing>`_ из нашего Вики."

# af26680251b0437e807a48d7946c3724
#: ../../src/tutorial.rst:807
msgid ""
"Tip: To make pretty printing the default in the Python interpreter, use::"
msgstr ""
"Совет: Чтобы активировать Pretty-print по умолчанию в интерпретаторе Python, "
"используйте::"

# b34cf35aca67417bbedfd0f9912d3dab
#: ../../src/tutorial.rst:830
msgid "**Python printing**"
msgstr "**Печать объектов Python**"

# f6300e28499f4c23b1a18aca896340bb
#: ../../src/tutorial.rst:846
msgid "**LaTeX printing**"
msgstr "**Печать в формате LaTeX**"

# 3b81c7e35c364676a8ec8587b515ac8b
#: ../../src/tutorial.rst:863
msgid "**MathML**"
msgstr "**MathML**"

# ee36b86c5d54419fbde01ac89cab213b
#: ../../src/tutorial.rst:875
msgid "**Pyglet**"
msgstr "**Pyglet**"

# 8ea61d943b2b4960a879932eba46bc1b
#: ../../src/tutorial.rst:881
msgid ""
"If pyglet is installed, a pyglet window will open containing the LaTeX "
"rendered expression:"
msgstr "Появится окно pyglet с отрисованным выражением LaTeX:"

# 8741a66d24b04738a563afc90a41567b
#: ../../src/tutorial.rst:887
msgid "Notes"
msgstr "Примечания"

# 51219a05b9a84e79b754d8d03b7fc4fb
#: ../../src/tutorial.rst:889
msgid ""
"``isympy`` calls ``pprint`` automatically, so that's why you see pretty "
"printing by default."
msgstr ""
"``isympy`` вызывает ``pprint`` автоматически, по этой причине Pretty-print "
"будет включен в ``isympy`` по умолчанию."

# 7b126ec3363b4c63a6d6b98728a9738a
#: ../../src/tutorial.rst:892
msgid ""
"Note that there is also a printing module available, ``sympy.printing``.  "
"Other printing methods available through this module are:"
msgstr ""
"Также доступен модуль печати - ``sympy.printing``. Через этот модуль "
"доступны следующий функции печати:"

# 1001063c4e97442dbcb0491eb0641bba
#: ../../src/tutorial.rst:895
msgid ""
"``pretty(expr)``, ``pretty_print(expr)``, ``pprint(expr)``: Return or print, "
"respectively, a pretty representation of ``expr``. This is the same as the "
"second level of representation described above."
msgstr ""
"``pretty(expr)``, ``pretty_print(expr)``, ``pprint(expr)``: Возвращает или "
"выводит на экран, соответственно, \"Красивое\" представление выражения "
"``expr``. "

# ee0ca8e34ce04b458228cb9d6565ec1a
#: ../../src/tutorial.rst:897
msgid ""
"``latex(expr)``, ``print_latex(expr)``: Return or print, respectively, a "
"`LaTeX <http://www.latex-project.org/>`_  representation of ``expr``"
msgstr ""
"``latex(expr)``, ``print_latex(expr)``: Возвращает или выводит на экран, "
"соответственно, `LaTeX <http://www.latex-project.org/>`_ -представление "
"``expr``"

# ebfeade491644b0b85f72b00bd3c1bdf
#: ../../src/tutorial.rst:899
msgid ""
"``mathml(expr)``, ``print_mathml(expr)``: Return or print, respectively, a "
"`MathML <http://www.w3.org/Math/>`_ representation of ``expr``."
msgstr ""
"``mathml(expr)``, ``print_mathml(expr)``: Возвращает или выводит на экран, "
"соответственно, `MathML <http://www.w3.org/Math/>`_ -представление ``expr``."

# bc0334fae2224eb2bfc81a55e7f522dd
#: ../../src/tutorial.rst:901
msgid ""
"``print_gtk(expr)``: Print ``expr`` to `Gtkmathview <http://helm.cs.unibo.it/"
"mml-widget/>`_, a GTK widget that displays MathML code. The `Gtkmathview "
"<http://helm.cs.unibo.it/mml-widget/>`_ program is required."
msgstr ""
"``print_gtk(expr)``: Вывод ``expr`` в `Gtkmathview <http://helm.cs.unibo.it/"
"mml-widget/>`_, виджет GTK, который отображает код MathML. Необходимо "
"наличие пакета `Gtkmathview <http://helm.cs.unibo.it/mml-widget/>`_ ."

# e76c7af419504e458893b76b1b485fd4
#: ../../src/tutorial.rst:904
msgid "Further documentation"
msgstr "Другие справочники"

# 2757e954e4c04b01bf9607f2127c3146
#: ../../src/tutorial.rst:906
msgid ""
"Now it's time to learn more about SymPy. Go through the :ref:`SymPy User's "
"Guide <guide>` and :ref:`SymPy Modules Reference <module-docs>`."
msgstr ""
"Чтобы узнать о SymPy подробнее, обратитесь :ref:`Руководство пользователя "
"SymPy <guide>` и :ref:`Описание модулей SymPy <module-docs>`."

# a037027043bd483dab5a52bd8d325980
#: ../../src/tutorial.rst:910
msgid ""
"Be sure to also browse our public `wiki.sympy.org <http://wiki.sympy.org/"
">`_, that contains a lot of useful examples, tutorials, cookbooks that we "
"and our users contributed, and feel free to edit it."
msgstr ""
"Также можно обратится на `wiki.sympy.org <http://wiki.sympy.org/>`_ - сайт, "
"который содержит множество полезных примеров, руководств и советов. Они "
"созданны нами и нашим сообществом. Мы будем рады, если и вы внесете в него "
"свой весомый вклад."

# f6e1f1f3b1214ffc848b88bd85bc8bfd
#: ../../src/tutorial.rst:915
msgid "Translations"
msgstr "Переводы"

# cf4fe2ed5e27427cb8d4af80f7e88c3f
#: ../../src/tutorial.rst:917
msgid "This tutorial is also available in other languages:"
msgstr "Этот текст доступен на других языках:"
