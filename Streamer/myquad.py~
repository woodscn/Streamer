import scipy.integrate
class Error(Exception):
    pass
def mul_quad(func,ranges,args=(),opts=()):
    if len(ranges)>6:
        raise Error('myquad does not currently support more than six-dimensional integrals!')
    opts_default={'full_output':0,'epsabs':1.49e-08,'epsrel':1.49e-08,
                  'limit':50,'points':None,'weight':None,'wvar':None,
                  'wopts':None}
    for k in (opts_default.keys()):
        try:
            exec(k+'=opts[-1][k]')
        except(KeyError,IndexError):
            exec(k+'=opts_default[k]')
    vars_base=['x0','x1','x2','x3','x4','x5','x6']
    funcs=['func']
    vars_str = [vars_base.pop(0) for rng in ranges]
    args_str = []
    for rng in ranges:
        range_str_lo,range_str_hi = rng
        vars_str.pop(0)
        funcs.append(
            'lambda '+','.join(vars_str)+' : mul_quad('+funcs[-1]+','+
            str(current_range[0])+'('+','.join(vars_str)+'),args=('+
            ','.join(vars_str)+
            '),opts=(full_ouput,epsabs,epsrel,limit,point,weight,wvar,wopts)'
            )
        print funcs[-1]
        print vars_str,args_str
        args_str.append(vars_str.pop(0))
    funcs.pop(1)
    print funcs
if __name__=='__main__':
    mul_quad(None,[[0,1],[2,3],[4,5],[6,7]],opts=[{'wvar':1}])
