/* File: TimeAdvancementStuffmodule.c
 * This file is auto-generated with f2py (version:2).
 * f2py is a Fortran to Python Interface Generator (FPIG), Second Edition,
 * written by Pearu Peterson <pearu@cens.ioc.ee>.
 * See http://cens.ioc.ee/projects/f2py2e/
 * Generation date: Mon Jul  9 12:43:01 2012
 * $Revision:$
 * $Date:$
 * Do not edit this file directly unless you know what you are doing!!!
 */
#ifdef __cplusplus
extern "C" {
#endif

/*********************** See f2py2e/cfuncs.py: includes ***********************/
#include "Python.h"
#include <stdarg.h>
#include "fortranobject.h"
#include <math.h>

/**************** See f2py2e/rules.py: mod_rules['modulebody'] ****************/
static PyObject *TimeAdvancementStuff_error;
static PyObject *TimeAdvancementStuff_module;

/*********************** See f2py2e/cfuncs.py: typedefs ***********************/
/*need_typedefs*/

/****************** See f2py2e/cfuncs.py: typedefs_generated ******************/
/*need_typedefs_generated*/

/********************** See f2py2e/cfuncs.py: cppmacros **********************/
#define rank(var) var ## _Rank
#define shape(var,dim) var ## _Dims[dim]
#define old_rank(var) (((PyArrayObject *)(capi_ ## var ## _tmp))->nd)
#define old_shape(var,dim) (((PyArrayObject *)(capi_ ## var ## _tmp))->dimensions[dim])
#define fshape(var,dim) shape(var,rank(var)-dim-1)
#define len(var) shape(var,0)
#define flen(var) fshape(var,0)
#define old_size(var) PyArray_SIZE((PyArrayObject *)(capi_ ## var ## _tmp))
/* #define index(i) capi_i ## i */
#define slen(var) capi_ ## var ## _len
#define size(var, ...) f2py_size((PyArrayObject *)(capi_ ## var ## _tmp), ## __VA_ARGS__, -1)

#define CHECKSCALAR(check,tcheck,name,show,var)\
  if (!(check)) {\
    char errstring[256];\
    sprintf(errstring, "%s: "show, "("tcheck") failed for "name, var);\
    PyErr_SetString(TimeAdvancementStuff_error,errstring);\
    /*goto capi_fail;*/\
  } else 
#ifdef DEBUGCFUNCS
#define CFUNCSMESS(mess) fprintf(stderr,"debug-capi:"mess);
#define CFUNCSMESSPY(mess,obj) CFUNCSMESS(mess) \
  PyObject_Print((PyObject *)obj,stderr,Py_PRINT_RAW);\
  fprintf(stderr,"\n");
#else
#define CFUNCSMESS(mess)
#define CFUNCSMESSPY(mess,obj)
#endif

#ifndef max
#define max(a,b) ((a > b) ? (a) : (b))
#endif
#ifndef min
#define min(a,b) ((a < b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a > b) ? (a) : (b))
#endif
#ifndef MIN
#define MIN(a,b) ((a < b) ? (a) : (b))
#endif

#if defined(PREPEND_FORTRAN)
#if defined(NO_APPEND_FORTRAN)
#if defined(UPPERCASE_FORTRAN)
#define F_FUNC(f,F) _##F
#else
#define F_FUNC(f,F) _##f
#endif
#else
#if defined(UPPERCASE_FORTRAN)
#define F_FUNC(f,F) _##F##_
#else
#define F_FUNC(f,F) _##f##_
#endif
#endif
#else
#if defined(NO_APPEND_FORTRAN)
#if defined(UPPERCASE_FORTRAN)
#define F_FUNC(f,F) F
#else
#define F_FUNC(f,F) f
#endif
#else
#if defined(UPPERCASE_FORTRAN)
#define F_FUNC(f,F) F##_
#else
#define F_FUNC(f,F) f##_
#endif
#endif
#endif
#if defined(UNDERSCORE_G77)
#define F_FUNC_US(f,F) F_FUNC(f##_,F##_)
#else
#define F_FUNC_US(f,F) F_FUNC(f,F)
#endif


/************************ See f2py2e/cfuncs.py: cfuncs ************************/
int f2py_size(PyArrayObject* var, ...)
{
  npy_int sz = 0;
  npy_int dim;
  npy_int rank;
  va_list argp;
  va_start(argp, var);
  dim = va_arg(argp, npy_int);
  if (dim==-1)
    {
      sz = PyArray_SIZE(var);
    }
  else
    {
      rank = PyArray_NDIM(var);
      if (dim>=1 && dim<=rank)
        sz = PyArray_DIM(var, dim-1);
      else
        fprintf(stderr, "f2py_size: 2nd argument value=%d fails to satisfy 1<=value<=%d. Result will be 0.\n", dim, rank);
    }
  va_end(argp);
  return sz;
}

static int int_from_pyobj(int* v,PyObject *obj,const char *errmess) {
  PyObject* tmp = NULL;
  if (PyInt_Check(obj)) {
    *v = (int)PyInt_AS_LONG(obj);
    return 1;
  }
  tmp = PyNumber_Int(obj);
  if (tmp) {
    *v = PyInt_AS_LONG(tmp);
    Py_DECREF(tmp);
    return 1;
  }
  if (PyComplex_Check(obj))
    tmp = PyObject_GetAttrString(obj,"real");
  else if (PyString_Check(obj) || PyUnicode_Check(obj))
    /*pass*/;
  else if (PySequence_Check(obj))
    tmp = PySequence_GetItem(obj,0);
  if (tmp) {
    PyErr_Clear();
    if (int_from_pyobj(v,tmp,errmess)) {Py_DECREF(tmp); return 1;}
    Py_DECREF(tmp);
  }
  {
    PyObject* err = PyErr_Occurred();
    if (err==NULL) err = TimeAdvancementStuff_error;
    PyErr_SetString(err,errmess);
  }
  return 0;
}

static int double_from_pyobj(double* v,PyObject *obj,const char *errmess) {
  PyObject* tmp = NULL;
  if (PyFloat_Check(obj)) {
#ifdef __sgi
    *v = PyFloat_AsDouble(obj);
#else
    *v = PyFloat_AS_DOUBLE(obj);
#endif
    return 1;
  }
  tmp = PyNumber_Float(obj);
  if (tmp) {
#ifdef __sgi
    *v = PyFloat_AsDouble(tmp);
#else
    *v = PyFloat_AS_DOUBLE(tmp);
#endif
    Py_DECREF(tmp);
    return 1;
  }
  if (PyComplex_Check(obj))
    tmp = PyObject_GetAttrString(obj,"real");
  else if (PyString_Check(obj) || PyUnicode_Check(obj))
    /*pass*/;
  else if (PySequence_Check(obj))
    tmp = PySequence_GetItem(obj,0);
  if (tmp) {
    PyErr_Clear();
    if (double_from_pyobj(v,tmp,errmess)) {Py_DECREF(tmp); return 1;}
    Py_DECREF(tmp);
  }
  {
    PyObject* err = PyErr_Occurred();
    if (err==NULL) err = TimeAdvancementStuff_error;
    PyErr_SetString(err,errmess);
  }
  return 0;
}


/********************* See f2py2e/cfuncs.py: userincludes *********************/
/*need_userincludes*/

/********************* See f2py2e/capi_rules.py: usercode *********************/


/* See f2py2e/rules.py */
/*eof externroutines*/

/******************** See f2py2e/capi_rules.py: usercode1 ********************/


/******************* See f2py2e/cb_rules.py: buildcallback *******************/
/*need_callbacks*/

/*********************** See f2py2e/rules.py: buildapi ***********************/

/***************************** checkcreatecolumn *****************************/
static char doc_f2py_rout_TimeAdvancementStuff_timeadvancementstuff_checkcreatecolumn[] = "\
Function signature:\n\
  checkcreatecolumn = checkcreatecolumn(main_data,bc_state,[nx,ny])\n\
Required arguments:\n"
"  main_data : input rank-3 array('d') with bounds (21,nx,ny)\n"
"  bc_state : input rank-3 array('d') with bounds (21,nx,ny)\n"
"Optional arguments:\n"
"  nx := shape(main_data,1) input int\n"
"  ny := shape(main_data,2) input int\n"
"Return objects:\n"
"  checkcreatecolumn : int";
/* #declfortranroutine# */
static PyObject *f2py_rout_TimeAdvancementStuff_timeadvancementstuff_checkcreatecolumn(const PyObject *capi_self,
                           PyObject *capi_args,
                           PyObject *capi_keywds,
                           void (*f2py_func)(int*,double*,double*,int*,int*)) {
  PyObject * volatile capi_buildvalue = NULL;
  volatile int f2py_success = 1;
/*decl*/

  int checkcreatecolumn = 0;
  double *main_data = NULL;
  npy_intp main_data_Dims[3] = {-1, -1, -1};
  const int main_data_Rank = 3;
  PyArrayObject *capi_main_data_tmp = NULL;
  int capi_main_data_intent = 0;
  PyObject *main_data_capi = Py_None;
  double *bc_state = NULL;
  npy_intp bc_state_Dims[3] = {-1, -1, -1};
  const int bc_state_Rank = 3;
  PyArrayObject *capi_bc_state_tmp = NULL;
  int capi_bc_state_intent = 0;
  PyObject *bc_state_capi = Py_None;
  int nx = 0;
  PyObject *nx_capi = Py_None;
  int ny = 0;
  PyObject *ny_capi = Py_None;
  static char *capi_kwlist[] = {"main_data","bc_state","nx","ny",NULL};

/*routdebugenter*/
#ifdef F2PY_REPORT_ATEXIT
f2py_start_clock();
#endif
  if (!PyArg_ParseTupleAndKeywords(capi_args,capi_keywds,\
    "OO|OO:TimeAdvancementStuff.timeadvancementstuff.checkcreatecolumn",\
    capi_kwlist,&main_data_capi,&bc_state_capi,&nx_capi,&ny_capi))
    return NULL;
/*frompyobj*/
  /* Processing variable main_data */
  main_data_Dims[0]=21;
  capi_main_data_intent |= F2PY_INTENT_IN;
  capi_main_data_tmp = array_from_pyobj(PyArray_DOUBLE,main_data_Dims,main_data_Rank,capi_main_data_intent,main_data_capi);
  if (capi_main_data_tmp == NULL) {
    if (!PyErr_Occurred())
      PyErr_SetString(TimeAdvancementStuff_error,"failed in converting 1st argument `main_data' of TimeAdvancementStuff.timeadvancementstuff.checkcreatecolumn to C/Fortran array" );
  } else {
    main_data = (double *)(capi_main_data_tmp->data);

  /* Processing variable checkcreatecolumn */
  /* Processing variable nx */
  if (nx_capi == Py_None) nx = shape(main_data,1); else
    f2py_success = int_from_pyobj(&nx,nx_capi,"TimeAdvancementStuff.timeadvancementstuff.checkcreatecolumn() 1st keyword (nx) can't be converted to int");
  if (f2py_success) {
  CHECKSCALAR(shape(main_data,1)==nx,"shape(main_data,1)==nx","1st keyword nx","checkcreatecolumn:nx=%d",nx) {
  /* Processing variable ny */
  if (ny_capi == Py_None) ny = shape(main_data,2); else
    f2py_success = int_from_pyobj(&ny,ny_capi,"TimeAdvancementStuff.timeadvancementstuff.checkcreatecolumn() 2nd keyword (ny) can't be converted to int");
  if (f2py_success) {
  CHECKSCALAR(shape(main_data,2)==ny,"shape(main_data,2)==ny","2nd keyword ny","checkcreatecolumn:ny=%d",ny) {
  /* Processing variable bc_state */
  bc_state_Dims[0]=21,bc_state_Dims[1]=nx,bc_state_Dims[2]=ny;
  capi_bc_state_intent |= F2PY_INTENT_IN;
  capi_bc_state_tmp = array_from_pyobj(PyArray_DOUBLE,bc_state_Dims,bc_state_Rank,capi_bc_state_intent,bc_state_capi);
  if (capi_bc_state_tmp == NULL) {
    if (!PyErr_Occurred())
      PyErr_SetString(TimeAdvancementStuff_error,"failed in converting 2nd argument `bc_state' of TimeAdvancementStuff.timeadvancementstuff.checkcreatecolumn to C/Fortran array" );
  } else {
    bc_state = (double *)(capi_bc_state_tmp->data);

/*end of frompyobj*/
#ifdef F2PY_REPORT_ATEXIT
f2py_start_call_clock();
#endif
/*callfortranroutine*/
  (*f2py_func)(&checkcreatecolumn,main_data,bc_state,&nx,&ny);
if (PyErr_Occurred())
  f2py_success = 0;
#ifdef F2PY_REPORT_ATEXIT
f2py_stop_call_clock();
#endif
/*end of callfortranroutine*/
    if (f2py_success) {
/*pyobjfrom*/
/*end of pyobjfrom*/
    CFUNCSMESS("Building return value.\n");
    capi_buildvalue = Py_BuildValue("i",checkcreatecolumn);
/*closepyobjfrom*/
/*end of closepyobjfrom*/
    } /*if (f2py_success) after callfortranroutine*/
/*cleanupfrompyobj*/
  if((PyObject *)capi_bc_state_tmp!=bc_state_capi) {
    Py_XDECREF(capi_bc_state_tmp); }
  }  /*if (capi_bc_state_tmp == NULL) ... else of bc_state*/
  /* End of cleaning variable bc_state */
  } /*CHECKSCALAR(shape(main_data,2)==ny)*/
  } /*if (f2py_success) of ny*/
  /* End of cleaning variable ny */
  } /*CHECKSCALAR(shape(main_data,1)==nx)*/
  } /*if (f2py_success) of nx*/
  /* End of cleaning variable nx */
  /* End of cleaning variable checkcreatecolumn */
  if((PyObject *)capi_main_data_tmp!=main_data_capi) {
    Py_XDECREF(capi_main_data_tmp); }
  }  /*if (capi_main_data_tmp == NULL) ... else of main_data*/
  /* End of cleaning variable main_data */
/*end of cleanupfrompyobj*/
  if (capi_buildvalue == NULL) {
/*routdebugfailure*/
  } else {
/*routdebugleave*/
  }
  CFUNCSMESS("Freeing memory.\n");
/*freemem*/
#ifdef F2PY_REPORT_ATEXIT
f2py_stop_clock();
#endif
  return capi_buildvalue;
}
/************************** end of checkcreatecolumn **************************/

/******************************** createcolumn ********************************/
static char doc_f2py_rout_TimeAdvancementStuff_timeadvancementstuff_createcolumn[] = "\
Function signature:\n\
  out = createcolumn(main_data,bc_state,[ny,nz])\n\
Required arguments:\n"
"  main_data : input rank-3 array('d') with bounds (21,ny,nz)\n"
"  bc_state : input rank-3 array('d') with bounds (21,ny,nz)\n"
"Optional arguments:\n"
"  ny := shape(main_data,1) input int\n"
"  nz := shape(main_data,2) input int\n"
"Return objects:\n"
"  out : rank-3 array('d') with bounds (21,ny,nz)";
/*  */
static PyObject *f2py_rout_TimeAdvancementStuff_timeadvancementstuff_createcolumn(const PyObject *capi_self,
                           PyObject *capi_args,
                           PyObject *capi_keywds,
                           void (*f2py_func)(double*,double*,int*,int*,double*)) {
  PyObject * volatile capi_buildvalue = NULL;
  volatile int f2py_success = 1;
/*decl*/

  double *main_data = NULL;
  npy_intp main_data_Dims[3] = {-1, -1, -1};
  const int main_data_Rank = 3;
  PyArrayObject *capi_main_data_tmp = NULL;
  int capi_main_data_intent = 0;
  PyObject *main_data_capi = Py_None;
  double *bc_state = NULL;
  npy_intp bc_state_Dims[3] = {-1, -1, -1};
  const int bc_state_Rank = 3;
  PyArrayObject *capi_bc_state_tmp = NULL;
  int capi_bc_state_intent = 0;
  PyObject *bc_state_capi = Py_None;
  int ny = 0;
  PyObject *ny_capi = Py_None;
  int nz = 0;
  PyObject *nz_capi = Py_None;
  double *out = NULL;
  npy_intp out_Dims[3] = {-1, -1, -1};
  const int out_Rank = 3;
  PyArrayObject *capi_out_tmp = NULL;
  int capi_out_intent = 0;
  static char *capi_kwlist[] = {"main_data","bc_state","ny","nz",NULL};

/*routdebugenter*/
#ifdef F2PY_REPORT_ATEXIT
f2py_start_clock();
#endif
  if (!PyArg_ParseTupleAndKeywords(capi_args,capi_keywds,\
    "OO|OO:TimeAdvancementStuff.timeadvancementstuff.createcolumn",\
    capi_kwlist,&main_data_capi,&bc_state_capi,&ny_capi,&nz_capi))
    return NULL;
/*frompyobj*/
  /* Processing variable main_data */
  main_data_Dims[0]=21;
  capi_main_data_intent |= F2PY_INTENT_IN;
  capi_main_data_tmp = array_from_pyobj(PyArray_DOUBLE,main_data_Dims,main_data_Rank,capi_main_data_intent,main_data_capi);
  if (capi_main_data_tmp == NULL) {
    if (!PyErr_Occurred())
      PyErr_SetString(TimeAdvancementStuff_error,"failed in converting 1st argument `main_data' of TimeAdvancementStuff.timeadvancementstuff.createcolumn to C/Fortran array" );
  } else {
    main_data = (double *)(capi_main_data_tmp->data);

  /* Processing variable ny */
  if (ny_capi == Py_None) ny = shape(main_data,1); else
    f2py_success = int_from_pyobj(&ny,ny_capi,"TimeAdvancementStuff.timeadvancementstuff.createcolumn() 1st keyword (ny) can't be converted to int");
  if (f2py_success) {
  CHECKSCALAR(shape(main_data,1)==ny,"shape(main_data,1)==ny","1st keyword ny","createcolumn:ny=%d",ny) {
  /* Processing variable nz */
  if (nz_capi == Py_None) nz = shape(main_data,2); else
    f2py_success = int_from_pyobj(&nz,nz_capi,"TimeAdvancementStuff.timeadvancementstuff.createcolumn() 2nd keyword (nz) can't be converted to int");
  if (f2py_success) {
  CHECKSCALAR(shape(main_data,2)==nz,"shape(main_data,2)==nz","2nd keyword nz","createcolumn:nz=%d",nz) {
  /* Processing variable out */
  out_Dims[0]=21,out_Dims[1]=ny,out_Dims[2]=nz;
  capi_out_intent |= F2PY_INTENT_OUT|F2PY_INTENT_HIDE;
  capi_out_tmp = array_from_pyobj(PyArray_DOUBLE,out_Dims,out_Rank,capi_out_intent,Py_None);
  if (capi_out_tmp == NULL) {
    if (!PyErr_Occurred())
      PyErr_SetString(TimeAdvancementStuff_error,"failed in converting hidden `out' of TimeAdvancementStuff.timeadvancementstuff.createcolumn to C/Fortran array" );
  } else {
    out = (double *)(capi_out_tmp->data);

  /* Processing variable bc_state */
  bc_state_Dims[0]=21,bc_state_Dims[1]=ny,bc_state_Dims[2]=nz;
  capi_bc_state_intent |= F2PY_INTENT_IN;
  capi_bc_state_tmp = array_from_pyobj(PyArray_DOUBLE,bc_state_Dims,bc_state_Rank,capi_bc_state_intent,bc_state_capi);
  if (capi_bc_state_tmp == NULL) {
    if (!PyErr_Occurred())
      PyErr_SetString(TimeAdvancementStuff_error,"failed in converting 2nd argument `bc_state' of TimeAdvancementStuff.timeadvancementstuff.createcolumn to C/Fortran array" );
  } else {
    bc_state = (double *)(capi_bc_state_tmp->data);

/*end of frompyobj*/
#ifdef F2PY_REPORT_ATEXIT
f2py_start_call_clock();
#endif
/*callfortranroutine*/
        (*f2py_func)(main_data,bc_state,&ny,&nz,out);
if (PyErr_Occurred())
  f2py_success = 0;
#ifdef F2PY_REPORT_ATEXIT
f2py_stop_call_clock();
#endif
/*end of callfortranroutine*/
    if (f2py_success) {
/*pyobjfrom*/
/*end of pyobjfrom*/
    CFUNCSMESS("Building return value.\n");
    capi_buildvalue = Py_BuildValue("N",capi_out_tmp);
/*closepyobjfrom*/
/*end of closepyobjfrom*/
    } /*if (f2py_success) after callfortranroutine*/
/*cleanupfrompyobj*/
  if((PyObject *)capi_bc_state_tmp!=bc_state_capi) {
    Py_XDECREF(capi_bc_state_tmp); }
  }  /*if (capi_bc_state_tmp == NULL) ... else of bc_state*/
  /* End of cleaning variable bc_state */
  }  /*if (capi_out_tmp == NULL) ... else of out*/
  /* End of cleaning variable out */
  } /*CHECKSCALAR(shape(main_data,2)==nz)*/
  } /*if (f2py_success) of nz*/
  /* End of cleaning variable nz */
  } /*CHECKSCALAR(shape(main_data,1)==ny)*/
  } /*if (f2py_success) of ny*/
  /* End of cleaning variable ny */
  if((PyObject *)capi_main_data_tmp!=main_data_capi) {
    Py_XDECREF(capi_main_data_tmp); }
  }  /*if (capi_main_data_tmp == NULL) ... else of main_data*/
  /* End of cleaning variable main_data */
/*end of cleanupfrompyobj*/
  if (capi_buildvalue == NULL) {
/*routdebugfailure*/
  } else {
/*routdebugleave*/
  }
  CFUNCSMESS("Freeing memory.\n");
/*freemem*/
#ifdef F2PY_REPORT_ATEXIT
f2py_stop_clock();
#endif
  return capi_buildvalue;
}
/**************************** end of createcolumn ****************************/

/***************************** computationalgrads *****************************/
static char doc_f2py_rout_TimeAdvancementStuff_generalutilities_computationalgrads[] = "\
Function signature:\n\
  gradxi,gradeta,gradzeta = computationalgrads(metric,jac)\n\
Required arguments:\n"
"  metric : input rank-1 array('d') with bounds (9)\n"
"  jac : input float\n"
"Return objects:\n"
"  gradxi : rank-1 array('d') with bounds (3)\n"
"  gradeta : rank-1 array('d') with bounds (3)\n"
"  gradzeta : rank-1 array('d') with bounds (3)";
/*  */
static PyObject *f2py_rout_TimeAdvancementStuff_generalutilities_computationalgrads(const PyObject *capi_self,
                           PyObject *capi_args,
                           PyObject *capi_keywds,
                           void (*f2py_func)(double*,double*,double*,double*,double*)) {
  PyObject * volatile capi_buildvalue = NULL;
  volatile int f2py_success = 1;
/*decl*/

  double *metric = NULL;
  npy_intp metric_Dims[1] = {-1};
  const int metric_Rank = 1;
  PyArrayObject *capi_metric_tmp = NULL;
  int capi_metric_intent = 0;
  PyObject *metric_capi = Py_None;
  double jac = 0;
  PyObject *jac_capi = Py_None;
  double *gradxi = NULL;
  npy_intp gradxi_Dims[1] = {-1};
  const int gradxi_Rank = 1;
  PyArrayObject *capi_gradxi_tmp = NULL;
  int capi_gradxi_intent = 0;
  double *gradeta = NULL;
  npy_intp gradeta_Dims[1] = {-1};
  const int gradeta_Rank = 1;
  PyArrayObject *capi_gradeta_tmp = NULL;
  int capi_gradeta_intent = 0;
  double *gradzeta = NULL;
  npy_intp gradzeta_Dims[1] = {-1};
  const int gradzeta_Rank = 1;
  PyArrayObject *capi_gradzeta_tmp = NULL;
  int capi_gradzeta_intent = 0;
  static char *capi_kwlist[] = {"metric","jac",NULL};

/*routdebugenter*/
#ifdef F2PY_REPORT_ATEXIT
f2py_start_clock();
#endif
  if (!PyArg_ParseTupleAndKeywords(capi_args,capi_keywds,\
    "OO:TimeAdvancementStuff.generalutilities.computationalgrads",\
    capi_kwlist,&metric_capi,&jac_capi))
    return NULL;
/*frompyobj*/
  /* Processing variable metric */
  metric_Dims[0]=9;
  capi_metric_intent |= F2PY_INTENT_IN;
  capi_metric_tmp = array_from_pyobj(PyArray_DOUBLE,metric_Dims,metric_Rank,capi_metric_intent,metric_capi);
  if (capi_metric_tmp == NULL) {
    if (!PyErr_Occurred())
      PyErr_SetString(TimeAdvancementStuff_error,"failed in converting 1st argument `metric' of TimeAdvancementStuff.generalutilities.computationalgrads to C/Fortran array" );
  } else {
    metric = (double *)(capi_metric_tmp->data);

  /* Processing variable gradeta */
  gradeta_Dims[0]=3;
  capi_gradeta_intent |= F2PY_INTENT_OUT|F2PY_INTENT_HIDE;
  capi_gradeta_tmp = array_from_pyobj(PyArray_DOUBLE,gradeta_Dims,gradeta_Rank,capi_gradeta_intent,Py_None);
  if (capi_gradeta_tmp == NULL) {
    if (!PyErr_Occurred())
      PyErr_SetString(TimeAdvancementStuff_error,"failed in converting hidden `gradeta' of TimeAdvancementStuff.generalutilities.computationalgrads to C/Fortran array" );
  } else {
    gradeta = (double *)(capi_gradeta_tmp->data);

  /* Processing variable jac */
    f2py_success = double_from_pyobj(&jac,jac_capi,"TimeAdvancementStuff.generalutilities.computationalgrads() 2nd argument (jac) can't be converted to double");
  if (f2py_success) {
  /* Processing variable gradzeta */
  gradzeta_Dims[0]=3;
  capi_gradzeta_intent |= F2PY_INTENT_OUT|F2PY_INTENT_HIDE;
  capi_gradzeta_tmp = array_from_pyobj(PyArray_DOUBLE,gradzeta_Dims,gradzeta_Rank,capi_gradzeta_intent,Py_None);
  if (capi_gradzeta_tmp == NULL) {
    if (!PyErr_Occurred())
      PyErr_SetString(TimeAdvancementStuff_error,"failed in converting hidden `gradzeta' of TimeAdvancementStuff.generalutilities.computationalgrads to C/Fortran array" );
  } else {
    gradzeta = (double *)(capi_gradzeta_tmp->data);

  /* Processing variable gradxi */
  gradxi_Dims[0]=3;
  capi_gradxi_intent |= F2PY_INTENT_OUT|F2PY_INTENT_HIDE;
  capi_gradxi_tmp = array_from_pyobj(PyArray_DOUBLE,gradxi_Dims,gradxi_Rank,capi_gradxi_intent,Py_None);
  if (capi_gradxi_tmp == NULL) {
    if (!PyErr_Occurred())
      PyErr_SetString(TimeAdvancementStuff_error,"failed in converting hidden `gradxi' of TimeAdvancementStuff.generalutilities.computationalgrads to C/Fortran array" );
  } else {
    gradxi = (double *)(capi_gradxi_tmp->data);

/*end of frompyobj*/
#ifdef F2PY_REPORT_ATEXIT
f2py_start_call_clock();
#endif
/*callfortranroutine*/
        (*f2py_func)(metric,&jac,gradxi,gradeta,gradzeta);
if (PyErr_Occurred())
  f2py_success = 0;
#ifdef F2PY_REPORT_ATEXIT
f2py_stop_call_clock();
#endif
/*end of callfortranroutine*/
    if (f2py_success) {
/*pyobjfrom*/
/*end of pyobjfrom*/
    CFUNCSMESS("Building return value.\n");
    capi_buildvalue = Py_BuildValue("NNN",capi_gradxi_tmp,capi_gradeta_tmp,capi_gradzeta_tmp);
/*closepyobjfrom*/
/*end of closepyobjfrom*/
    } /*if (f2py_success) after callfortranroutine*/
/*cleanupfrompyobj*/
  }  /*if (capi_gradxi_tmp == NULL) ... else of gradxi*/
  /* End of cleaning variable gradxi */
  }  /*if (capi_gradzeta_tmp == NULL) ... else of gradzeta*/
  /* End of cleaning variable gradzeta */
  } /*if (f2py_success) of jac*/
  /* End of cleaning variable jac */
  }  /*if (capi_gradeta_tmp == NULL) ... else of gradeta*/
  /* End of cleaning variable gradeta */
  if((PyObject *)capi_metric_tmp!=metric_capi) {
    Py_XDECREF(capi_metric_tmp); }
  }  /*if (capi_metric_tmp == NULL) ... else of metric*/
  /* End of cleaning variable metric */
/*end of cleanupfrompyobj*/
  if (capi_buildvalue == NULL) {
/*routdebugfailure*/
  } else {
/*routdebugleave*/
  }
  CFUNCSMESS("Freeing memory.\n");
/*freemem*/
#ifdef F2PY_REPORT_ATEXIT
f2py_stop_clock();
#endif
  return capi_buildvalue;
}
/************************* end of computationalgrads *************************/

/********************************** jacobian **********************************/
static char doc_f2py_rout_TimeAdvancementStuff_generalutilities_jacobian[] = "\
Function signature:\n\
  jacobian = jacobian(in)\n\
Required arguments:\n"
"  in : input rank-1 array('d') with bounds (9)\n"
"Return objects:\n"
"  jacobian : float";
/* #declfortranroutine# */
static PyObject *f2py_rout_TimeAdvancementStuff_generalutilities_jacobian(const PyObject *capi_self,
                           PyObject *capi_args,
                           PyObject *capi_keywds,
                           void (*f2py_func)(double*,double*)) {
  PyObject * volatile capi_buildvalue = NULL;
  volatile int f2py_success = 1;
/*decl*/

  double jacobian = 0;
  double *in = NULL;
  npy_intp in_Dims[1] = {-1};
  const int in_Rank = 1;
  PyArrayObject *capi_in_tmp = NULL;
  int capi_in_intent = 0;
  PyObject *in_capi = Py_None;
  static char *capi_kwlist[] = {"in",NULL};

/*routdebugenter*/
#ifdef F2PY_REPORT_ATEXIT
f2py_start_clock();
#endif
  if (!PyArg_ParseTupleAndKeywords(capi_args,capi_keywds,\
    "O:TimeAdvancementStuff.generalutilities.jacobian",\
    capi_kwlist,&in_capi))
    return NULL;
/*frompyobj*/
  /* Processing variable jacobian */
  /* Processing variable in */
  in_Dims[0]=9;
  capi_in_intent |= F2PY_INTENT_IN;
  capi_in_tmp = array_from_pyobj(PyArray_DOUBLE,in_Dims,in_Rank,capi_in_intent,in_capi);
  if (capi_in_tmp == NULL) {
    if (!PyErr_Occurred())
      PyErr_SetString(TimeAdvancementStuff_error,"failed in converting 1st argument `in' of TimeAdvancementStuff.generalutilities.jacobian to C/Fortran array" );
  } else {
    in = (double *)(capi_in_tmp->data);

/*end of frompyobj*/
#ifdef F2PY_REPORT_ATEXIT
f2py_start_call_clock();
#endif
/*callfortranroutine*/
  (*f2py_func)(&jacobian,in);
if (PyErr_Occurred())
  f2py_success = 0;
#ifdef F2PY_REPORT_ATEXIT
f2py_stop_call_clock();
#endif
/*end of callfortranroutine*/
    if (f2py_success) {
/*pyobjfrom*/
/*end of pyobjfrom*/
    CFUNCSMESS("Building return value.\n");
    capi_buildvalue = Py_BuildValue("d",jacobian);
/*closepyobjfrom*/
/*end of closepyobjfrom*/
    } /*if (f2py_success) after callfortranroutine*/
/*cleanupfrompyobj*/
  if((PyObject *)capi_in_tmp!=in_capi) {
    Py_XDECREF(capi_in_tmp); }
  }  /*if (capi_in_tmp == NULL) ... else of in*/
  /* End of cleaning variable in */
  /* End of cleaning variable jacobian */
/*end of cleanupfrompyobj*/
  if (capi_buildvalue == NULL) {
/*routdebugfailure*/
  } else {
/*routdebugleave*/
  }
  CFUNCSMESS("Freeing memory.\n");
/*freemem*/
#ifdef F2PY_REPORT_ATEXIT
f2py_stop_clock();
#endif
  return capi_buildvalue;
}
/****************************** end of jacobian ******************************/

/******************************** twodgradient ********************************/
static char doc_f2py_rout_TimeAdvancementStuff_generalutilities_twodgradient[] = "\
Function signature:\n\
  gradx,grady = twodgradient(in,dx,dy,[nx,ny])\n\
Required arguments:\n"
"  in : input rank-2 array('d') with bounds (nx,ny)\n"
"  dx : input float\n"
"  dy : input float\n"
"Optional arguments:\n"
"  nx := shape(in,0) input int\n"
"  ny := shape(in,1) input int\n"
"Return objects:\n"
"  gradx : rank-2 array('d') with bounds (nx,ny)\n"
"  grady : rank-2 array('d') with bounds (nx,ny)";
/*  */
static PyObject *f2py_rout_TimeAdvancementStuff_generalutilities_twodgradient(const PyObject *capi_self,
                           PyObject *capi_args,
                           PyObject *capi_keywds,
                           void (*f2py_func)(double*,double*,double*,int*,int*,double*,double*)) {
  PyObject * volatile capi_buildvalue = NULL;
  volatile int f2py_success = 1;
/*decl*/

  double *in = NULL;
  npy_intp in_Dims[2] = {-1, -1};
  const int in_Rank = 2;
  PyArrayObject *capi_in_tmp = NULL;
  int capi_in_intent = 0;
  PyObject *in_capi = Py_None;
  double dx = 0;
  PyObject *dx_capi = Py_None;
  double dy = 0;
  PyObject *dy_capi = Py_None;
  int nx = 0;
  PyObject *nx_capi = Py_None;
  int ny = 0;
  PyObject *ny_capi = Py_None;
  double *gradx = NULL;
  npy_intp gradx_Dims[2] = {-1, -1};
  const int gradx_Rank = 2;
  PyArrayObject *capi_gradx_tmp = NULL;
  int capi_gradx_intent = 0;
  double *grady = NULL;
  npy_intp grady_Dims[2] = {-1, -1};
  const int grady_Rank = 2;
  PyArrayObject *capi_grady_tmp = NULL;
  int capi_grady_intent = 0;
  static char *capi_kwlist[] = {"in","dx","dy","nx","ny",NULL};

/*routdebugenter*/
#ifdef F2PY_REPORT_ATEXIT
f2py_start_clock();
#endif
  if (!PyArg_ParseTupleAndKeywords(capi_args,capi_keywds,\
    "OOO|OO:TimeAdvancementStuff.generalutilities.twodgradient",\
    capi_kwlist,&in_capi,&dx_capi,&dy_capi,&nx_capi,&ny_capi))
    return NULL;
/*frompyobj*/
  /* Processing variable dx */
    f2py_success = double_from_pyobj(&dx,dx_capi,"TimeAdvancementStuff.generalutilities.twodgradient() 2nd argument (dx) can't be converted to double");
  if (f2py_success) {
  /* Processing variable in */
  ;
  capi_in_intent |= F2PY_INTENT_IN;
  capi_in_tmp = array_from_pyobj(PyArray_DOUBLE,in_Dims,in_Rank,capi_in_intent,in_capi);
  if (capi_in_tmp == NULL) {
    if (!PyErr_Occurred())
      PyErr_SetString(TimeAdvancementStuff_error,"failed in converting 1st argument `in' of TimeAdvancementStuff.generalutilities.twodgradient to C/Fortran array" );
  } else {
    in = (double *)(capi_in_tmp->data);

  /* Processing variable dy */
    f2py_success = double_from_pyobj(&dy,dy_capi,"TimeAdvancementStuff.generalutilities.twodgradient() 3rd argument (dy) can't be converted to double");
  if (f2py_success) {
  /* Processing variable nx */
  if (nx_capi == Py_None) nx = shape(in,0); else
    f2py_success = int_from_pyobj(&nx,nx_capi,"TimeAdvancementStuff.generalutilities.twodgradient() 1st keyword (nx) can't be converted to int");
  if (f2py_success) {
  CHECKSCALAR(shape(in,0)==nx,"shape(in,0)==nx","1st keyword nx","twodgradient:nx=%d",nx) {
  /* Processing variable ny */
  if (ny_capi == Py_None) ny = shape(in,1); else
    f2py_success = int_from_pyobj(&ny,ny_capi,"TimeAdvancementStuff.generalutilities.twodgradient() 2nd keyword (ny) can't be converted to int");
  if (f2py_success) {
  CHECKSCALAR(shape(in,1)==ny,"shape(in,1)==ny","2nd keyword ny","twodgradient:ny=%d",ny) {
  /* Processing variable grady */
  grady_Dims[0]=nx,grady_Dims[1]=ny;
  capi_grady_intent |= F2PY_INTENT_OUT|F2PY_INTENT_HIDE;
  capi_grady_tmp = array_from_pyobj(PyArray_DOUBLE,grady_Dims,grady_Rank,capi_grady_intent,Py_None);
  if (capi_grady_tmp == NULL) {
    if (!PyErr_Occurred())
      PyErr_SetString(TimeAdvancementStuff_error,"failed in converting hidden `grady' of TimeAdvancementStuff.generalutilities.twodgradient to C/Fortran array" );
  } else {
    grady = (double *)(capi_grady_tmp->data);

  /* Processing variable gradx */
  gradx_Dims[0]=nx,gradx_Dims[1]=ny;
  capi_gradx_intent |= F2PY_INTENT_OUT|F2PY_INTENT_HIDE;
  capi_gradx_tmp = array_from_pyobj(PyArray_DOUBLE,gradx_Dims,gradx_Rank,capi_gradx_intent,Py_None);
  if (capi_gradx_tmp == NULL) {
    if (!PyErr_Occurred())
      PyErr_SetString(TimeAdvancementStuff_error,"failed in converting hidden `gradx' of TimeAdvancementStuff.generalutilities.twodgradient to C/Fortran array" );
  } else {
    gradx = (double *)(capi_gradx_tmp->data);

/*end of frompyobj*/
#ifdef F2PY_REPORT_ATEXIT
f2py_start_call_clock();
#endif
/*callfortranroutine*/
        (*f2py_func)(in,&dx,&dy,&nx,&ny,gradx,grady);
if (PyErr_Occurred())
  f2py_success = 0;
#ifdef F2PY_REPORT_ATEXIT
f2py_stop_call_clock();
#endif
/*end of callfortranroutine*/
    if (f2py_success) {
/*pyobjfrom*/
/*end of pyobjfrom*/
    CFUNCSMESS("Building return value.\n");
    capi_buildvalue = Py_BuildValue("NN",capi_gradx_tmp,capi_grady_tmp);
/*closepyobjfrom*/
/*end of closepyobjfrom*/
    } /*if (f2py_success) after callfortranroutine*/
/*cleanupfrompyobj*/
  }  /*if (capi_gradx_tmp == NULL) ... else of gradx*/
  /* End of cleaning variable gradx */
  }  /*if (capi_grady_tmp == NULL) ... else of grady*/
  /* End of cleaning variable grady */
  } /*CHECKSCALAR(shape(in,1)==ny)*/
  } /*if (f2py_success) of ny*/
  /* End of cleaning variable ny */
  } /*CHECKSCALAR(shape(in,0)==nx)*/
  } /*if (f2py_success) of nx*/
  /* End of cleaning variable nx */
  } /*if (f2py_success) of dy*/
  /* End of cleaning variable dy */
  if((PyObject *)capi_in_tmp!=in_capi) {
    Py_XDECREF(capi_in_tmp); }
  }  /*if (capi_in_tmp == NULL) ... else of in*/
  /* End of cleaning variable in */
  } /*if (f2py_success) of dx*/
  /* End of cleaning variable dx */
/*end of cleanupfrompyobj*/
  if (capi_buildvalue == NULL) {
/*routdebugfailure*/
  } else {
/*routdebugleave*/
  }
  CFUNCSMESS("Freeing memory.\n");
/*freemem*/
#ifdef F2PY_REPORT_ATEXIT
f2py_stop_clock();
#endif
  return capi_buildvalue;
}
/**************************** end of twodgradient ****************************/
/*eof body*/

/******************* See f2py2e/f90mod_rules.py: buildhooks *******************/

static FortranDataDef f2py_timeadvancementstuff_def[] = {
  {"checkcreatecolumn",-1,{{-1}},0,NULL,(void *)f2py_rout_TimeAdvancementStuff_timeadvancementstuff_checkcreatecolumn,doc_f2py_rout_TimeAdvancementStuff_timeadvancementstuff_checkcreatecolumn},
  {"createcolumn",-1,{{-1}},0,NULL,(void *)f2py_rout_TimeAdvancementStuff_timeadvancementstuff_createcolumn,doc_f2py_rout_TimeAdvancementStuff_timeadvancementstuff_createcolumn},
  {NULL}
};

static void f2py_setup_timeadvancementstuff(char *checkcreatecolumn,char *createcolumn) {
  int i_f2py=0;
  f2py_timeadvancementstuff_def[i_f2py++].data = checkcreatecolumn;
  f2py_timeadvancementstuff_def[i_f2py++].data = createcolumn;
}
extern void F_FUNC(f2pyinittimeadvancementstuff,F2PYINITTIMEADVANCEMENTSTUFF)(void (*)(char *,char *));
static void f2py_init_timeadvancementstuff(void) {
  F_FUNC(f2pyinittimeadvancementstuff,F2PYINITTIMEADVANCEMENTSTUFF)(f2py_setup_timeadvancementstuff);
}


static FortranDataDef f2py_generalutilities_def[] = {
  {"computationalgrads",-1,{{-1}},0,NULL,(void *)f2py_rout_TimeAdvancementStuff_generalutilities_computationalgrads,doc_f2py_rout_TimeAdvancementStuff_generalutilities_computationalgrads},
  {"jacobian",-1,{{-1}},0,NULL,(void *)f2py_rout_TimeAdvancementStuff_generalutilities_jacobian,doc_f2py_rout_TimeAdvancementStuff_generalutilities_jacobian},
  {"twodgradient",-1,{{-1}},0,NULL,(void *)f2py_rout_TimeAdvancementStuff_generalutilities_twodgradient,doc_f2py_rout_TimeAdvancementStuff_generalutilities_twodgradient},
  {NULL}
};

static void f2py_setup_generalutilities(char *computationalgrads,char *jacobian,char *twodgradient) {
  int i_f2py=0;
  f2py_generalutilities_def[i_f2py++].data = computationalgrads;
  f2py_generalutilities_def[i_f2py++].data = jacobian;
  f2py_generalutilities_def[i_f2py++].data = twodgradient;
}
extern void F_FUNC(f2pyinitgeneralutilities,F2PYINITGENERALUTILITIES)(void (*)(char *,char *,char *));
static void f2py_init_generalutilities(void) {
  F_FUNC(f2pyinitgeneralutilities,F2PYINITGENERALUTILITIES)(f2py_setup_generalutilities);
}

/*need_f90modhooks*/

/************** See f2py2e/rules.py: module_rules['modulebody'] **************/

/******************* See f2py2e/common_rules.py: buildhooks *******************/

/*need_commonhooks*/

/**************************** See f2py2e/rules.py ****************************/

static FortranDataDef f2py_routine_defs[] = {

/*eof routine_defs*/
  {NULL}
};

static PyMethodDef f2py_module_methods[] = {

  {NULL,NULL}
};

#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef moduledef = {
  PyModuleDef_HEAD_INIT,
  "TimeAdvancementStuff",
  NULL,
  -1,
  f2py_module_methods,
  NULL,
  NULL,
  NULL,
  NULL
};
#endif

#if PY_VERSION_HEX >= 0x03000000
#define RETVAL m
PyObject *PyInit_TimeAdvancementStuff(void) {
#else
#define RETVAL
PyMODINIT_FUNC initTimeAdvancementStuff(void) {
#endif
  int i;
  PyObject *m,*d, *s;
#if PY_VERSION_HEX >= 0x03000000
  m = TimeAdvancementStuff_module = PyModule_Create(&moduledef);
#else
  m = TimeAdvancementStuff_module = Py_InitModule("TimeAdvancementStuff", f2py_module_methods);
#endif
  Py_TYPE(&PyFortran_Type) = &PyType_Type;
  import_array();
  if (PyErr_Occurred())
    {PyErr_SetString(PyExc_ImportError, "can't initialize module TimeAdvancementStuff (failed to import numpy)"); return RETVAL;}
  d = PyModule_GetDict(m);
  s = PyString_FromString("$Revision: $");
  PyDict_SetItemString(d, "__version__", s);
#if PY_VERSION_HEX >= 0x03000000
  s = PyUnicode_FromString(
#else
  s = PyString_FromString(
#endif
    "This module 'TimeAdvancementStuff' is auto-generated with f2py (version:2).\nFunctions:\n"
"Fortran 90/95 modules:\n""  timeadvancementstuff --- checkcreatecolumn(),createcolumn()""  generalutilities --- computationalgrads(),jacobian(),twodgradient()"".");
  PyDict_SetItemString(d, "__doc__", s);
  TimeAdvancementStuff_error = PyErr_NewException ("TimeAdvancementStuff.error", NULL, NULL);
  Py_DECREF(s);
  for(i=0;f2py_routine_defs[i].name!=NULL;i++)
    PyDict_SetItemString(d, f2py_routine_defs[i].name,PyFortranObject_NewAsAttr(&f2py_routine_defs[i]));





/*eof initf2pywraphooks*/
  PyDict_SetItemString(d, "generalutilities", PyFortranObject_New(f2py_generalutilities_def,f2py_init_generalutilities));
  PyDict_SetItemString(d, "timeadvancementstuff", PyFortranObject_New(f2py_timeadvancementstuff_def,f2py_init_timeadvancementstuff));
/*eof initf90modhooks*/

/*eof initcommonhooks*/


#ifdef F2PY_REPORT_ATEXIT
  if (! PyErr_Occurred())
    on_exit(f2py_report_on_exit,(void*)"TimeAdvancementStuff");
#endif

  return RETVAL;
}
#ifdef __cplusplus
}
#endif
